import java.util.*;
import java.io.*;
 
 
public class ChessSudoku
{
	/* SIZE is the size parameter of the Sudoku puzzle, and N is the square of the size.  For 
	 * a standard Sudoku puzzle, SIZE is 3 and N is 9. 
	 */
	public int SIZE, N;
 
	/* The grid contains all the numbers in the Sudoku puzzle.  Numbers which have
	 * not yet been revealed are stored as 0. 
	 */
	public int grid[][];
 
	/* Booleans indicating whether of not one or more of the chess rules should be 
	 * applied to this Sudoku. 
	 */
	public boolean knightRule;
	public boolean kingRule;
	public boolean queenRule;
	
	// Field that stores the same Sudoku puzzle solved in all possible ways
	public HashSet<ChessSudoku> solutions = new HashSet<ChessSudoku>();
	
	private boolean checkBox(int row,int coln,  int num){
		int startrow =  row - row % SIZE;
		int startcoln = coln - coln % SIZE;
		for (int sr = startrow; sr< startrow+SIZE; sr++) {
			for (int sc = startcoln; sc< startcoln+SIZE; sc++) {
				if (num ==grid[sr][sc]) {
					return false;
				}
			}
		}
			return true;
	}
	
	private boolean checkwhole (int row,int coln,  int num) {
		//check row
		for (int count = 0; count < N; count++){
			//System.out.println(grid[count][row]);
			if (grid[row][count] == num) {
				//System.out.println("row");
				return false;
			}
			else if (grid[count][coln] == num) {
				//System.out.println("coln");
				return false;
			}
		}
		if (!checkBox(row,coln ,num)) {
			//System.out.println("Box");
			return false;
		}
		return true;
	}
 
	private ArrayList<Integer> getknights (int coln, int row) {
		ArrayList<Integer> allknights = new ArrayList<Integer>();
		int[] x = {-2, -1, 1, 2, 2, 1, -1, -2};
		int[] y = {1, 2, 2, 1, -1, -2, -2, -1};
		
		for(int i = 0; i < 8; i++) {
			if (row + x[i]>=0 && coln + y[i] >= 0 && row + x[i]<=N-1 && coln + y[i] <= N-1) {
				if (grid[row + x[i]][coln + y[i]] !=0) {
					allknights.add(grid[row + x[i]][coln + y[i]]);
				}
			}
		}
		//System.out.println("kighnts" + allknights);
		return allknights;
	}
	
	private ArrayList<Integer> getkings (int coln, int row) {
		ArrayList<Integer> allkings = new ArrayList<Integer>();
		int[] x = {-1, 0,  1, -1, -1, 0, 1,  1};
		int[] y = {1,  1,  1,  0, -1, -1, -1, 0};
		
		for(int i = 0; i < 8; i++) {
			if (row + x[i]>=0 && coln + y[i] >= 0 && row + x[i]<=N-1 && coln + y[i] <= N-1) {
				if (grid[row + x[i]][coln + y[i]] !=0) {
					allkings.add(grid[row + x[i]][coln + y[i]]);
					//System.out.println(grid[row + x[i]][coln + y[i]]);
					//System.out.println("row" + row + x[i]);
					//System.out.println("col" + coln + y[i]);
				}
			}
		}
		//System.out.println("kings" + allkings);
		return allkings;
	}
	
	private ArrayList<Integer> getqueens (int coln,int row) {
		ArrayList<Integer> allqueens = new ArrayList<Integer>();
		for(int i = -N; i <= N; i++) {
			if (row + i>=0 && coln + i >= 0 && row + i<=N-1 && coln + i <= N-1) {
				if (grid[row + i][coln + i]==9) {
					allqueens.add(grid[row + i][coln + i]);
					//System.out.println("row"+ (row+i) + " "+ "coln "+ (coln+i) + " "+grid[row + i][coln + i]);
					//System.out.println(i);
				}
			}
		}
		for(int j = -N; j <= N; j++) {
			if (row - j>=0 && coln + j >= 0 && row - j<=N-1 && coln + j <= N-1) {
				if (grid[row - j][coln + j] ==9) {
					allqueens.add(grid[row - j][coln + j]);
					//System.out.println("row"+ (row-j) + " "+ "coln "+ (coln+j) + " "+grid[row - j][coln + j]);
					//System.out.println(j);
				}
			}
		}
		//System.out.println("kighnts" + allknights);
		return allqueens;
	}
	
	private ArrayList<Integer> combine (int col,int row) {
		ArrayList<Integer> allcombine = new ArrayList<Integer>();
		if (knightRule) {
			ArrayList<Integer> allknights = getknights (col, row) ;
			allcombine.addAll(allknights);
		}
		
		if (kingRule) {
			ArrayList<Integer> allkings =getkings (col, row) ;
			allcombine.addAll(allkings);
		}
		
		if (queenRule) {
			ArrayList<Integer> allqueenss = getqueens (col, row) ;
			allcombine.addAll(allqueenss);
		}
		return allcombine;
	}
	
	private ArrayList<Integer> possibleNum( int row, int col){
		ArrayList<Integer> somepossibility = new ArrayList<Integer>();
	    for (int a = 1; a <= N; a++){
	        boolean nocollision = this.checkwhole(row, col,  a);
	        if (nocollision) {
	        	somepossibility.add(a);
	        }
	    }
	    //System.out.println("before" + somepossibility);
	    return somepossibility;
	}
	
	
	private int[][] makedeepcopy(int[][] current){
		int[][] newone =new int[N][N] ;
		for(int i=0; i<current.length; i++) {
			  for(int j=0; j<current[i].length; j++) {
				  newone[i][j]=current[i][j];
			  }
		}
		return newone;
	}
    private boolean specialsolveSudoku() {
    		int row = -1;
    		int col = -1;
    		boolean isEmpty = true;
    		for (int i = 0; i < N; i++){
    			for (int j = 0; j < N; j++){
    				if (grid[i][j] == 0){
    					col = j;
    					row = i;
    					isEmpty = false;
    					break;
    				}
    			}
    			if (!isEmpty) {
    				break;
    			}
    		}
    		
    		if (isEmpty){
    			ChessSudoku chesssu = new ChessSudoku(this.N);
    			chesssu.grid = makedeepcopy(this.grid);
    			chesssu.kingRule =this.kingRule;
    			chesssu.knightRule =this.knightRule;
    			chesssu.queenRule=this.queenRule;
    			this.solutions.add(chesssu);
    			return true;
    		}
 
    		for (int num = 1; num <= N; num++){
    				ArrayList<Integer> allcombine =  combine (col, row) ;
					boolean contain =  allcombine.contains(num);
					if (!contain) {
						if (checkwhole( row, col, num)){
							grid[row][col] = num;
							if (specialsolveSudoku()){
								return true;
							}
							else{
								grid[row][col] = 0;
							}
					}
    			}
    			
    		}
    		return false;
    	}
    
    private boolean multisolutionsSudoku() {
		int row = -1;
		int col = -1;
		boolean isEmpty = true;
		for (int i = 0; i < N; i++){
			for (int j = 0; j < N; j++){
				if (grid[i][j] == 0){
					col = j;
					row = i;
					isEmpty = false;
					break;
				}
			}
			if (!isEmpty) {
				break;
			}
		}
		
		if (isEmpty){			
			ChessSudoku chesssu = new ChessSudoku(this.N);
			chesssu.grid = makedeepcopy(this.grid);
			chesssu.kingRule =this.kingRule;
			chesssu.knightRule =this.knightRule;
			chesssu.queenRule=this.queenRule;
			this.solutions.add(chesssu);
			
			return true;
		}
 
		for (int num = 1; num <= N; num++){
			ArrayList<Integer> allcombine =  combine (col, row) ;
			boolean contain =  allcombine.contains(num);
			if (!contain) {
				if (checkwhole( row, col, num)){
					grid[row][col] = num;
					if (multisolutionsSudoku()){
						grid[row][col]=0;
					}
					else{
						grid[row][col] = 0;
					}
				}
			}
		}
		return false;
	}
    	
	private boolean normalsolveasudoku() {
		ArrayList<Integer> somenum= null;
		int row = -1;
		int col = -1;	
		boolean havesolved = false;
		for(int i = 0; i < N; i++){
			for(int j = 0; j < N; j++){
				if(grid[i][j] == 0){
					ArrayList<Integer> newp = possibleNum(i,j);
					if(row < 0 || newp.size() < somenum.size()){
						row = i; col = j; somenum = newp;
					}
				}
			}
		}
		
		if(row<0){
			
			//chesssu.solutions.add(chesssu);
 
			havesolved = true;
		}
		
		else{
			//System.out.println("still exe");
			for(int i = 0; i < somenum.size(); i++){	
				int temp[][] = new int[N][N];			
					temp = makedeepcopy(grid);
					grid[row][col] = somenum.get(i);
				
				if(this.normalsolveasudoku()){
					havesolved = true;
					break;
					
					}
				grid = temp;
			}
		}
	
		solutions.add(this);
		//System.out.println("count2" + "   "+ count);
		return havesolved;
	}
	
	/* The solve() method should remove all the unknown characters ('x') in the grid
	 * and replace them with the numbers in the correct range that satisfy the constraints
	 * of the Sudoku puzzle. If true is provided as input, the method should find finds ALL 
	 * possible solutions and store them in the field named solutions. */
	public void solve(boolean allSolutions) {
		if(allSolutions ==false) {
			if (this.knightRule || this.kingRule || this.queenRule) {
				//System.out.println("special");
				this.specialsolveSudoku();
			}
			else if (this.kingRule ==false && this.kingRule==false && this.queenRule ==false) {
				//System.out.println("normal");
				this.normalsolveasudoku();
			}
		}
		else {
			//System.out.println("multiple");
			this.multisolutionsSudoku();
		}
		
		Iterator<ChessSudoku> itr = this.solutions.iterator();
	    while (itr.hasNext()) {
	    	this.grid = itr.next().grid;
	    }
 
	}
	
	/*****************************************************************************/
	/* NOTE: YOU SHOULD NOT HAVE TO MODIFY ANY OF THE METHODS BELOW THIS LINE. */
	/*****************************************************************************/
 
	/* Default constructor.  This will initialize all positions to the default 0
	 * value.  Use the read() function to load the Sudoku puzzle from a file or
	 * the standard input. */
	public ChessSudoku( int size ) {
		SIZE = size;
		N = size*size;
 
		grid = new int[N][N];
		for( int i = 0; i < N; i++ ) 
			for( int j = 0; j < N; j++ ) 
				grid[i][j] = 0;
	}
 
 
	/* readInteger is a helper function for the reading of the input file.  It reads
	 * words until it finds one that represents an integer. For convenience, it will also
	 * recognize the string "x" as equivalent to "0". */
	static int readInteger( InputStream in ) throws Exception {
		int result = 0;
		boolean success = false;
 
		while( !success ) {
			String word = readWord( in );
 
			try {
				result = Integer.parseInt( word );
				success = true;
			} catch( Exception e ) {
				// Convert 'x' words into 0's
				if( word.compareTo("x") == 0 ) {
					result = 0;
					success = true;
				}
				// Ignore all other words that are not integers
			}
		}
 
		return result;
	}
 
 
	/* readWord is a helper function that reads a word separated by white space. */
	static String readWord( InputStream in ) throws Exception {
		StringBuffer result = new StringBuffer();
		int currentChar = in.read();
		String whiteSpace = " \t\r\n";
		// Ignore any leading white space
		while( whiteSpace.indexOf(currentChar) > -1 ) {
			currentChar = in.read();
		}
 
		// Read all characters until you reach white space
		while( whiteSpace.indexOf(currentChar) == -1 ) {
			result.append( (char) currentChar );
			currentChar = in.read();
		}
		return result.toString();
	}
 
 
	/* This function reads a Sudoku puzzle from the input stream in.  The Sudoku
	 * grid is filled in one row at at time, from left to right.  All non-valid
	 * characters are ignored by this function and may be used in the Sudoku file
	 * to increase its legibility. */
	public void read( InputStream in ) throws Exception {
		for( int i = 0; i < N; i++ ) {
			for( int j = 0; j < N; j++ ) {
				grid[i][j] = readInteger( in );
			}
		}
	}
 
 
	/* Helper function for the printing of Sudoku puzzle.  This function will print
	 * out text, preceded by enough ' ' characters to make sure that the printint out
	 * takes at least width characters.  */
	void printFixedWidth( String text, int width ) {
		for( int i = 0; i < width - text.length(); i++ )
			System.out.print( " " );
		System.out.print( text );
	}
 
 
	/* The print() function outputs the Sudoku grid to the standard output, using
	 * a bit of extra formatting to make the result clearly readable. */
	public void print() {
		// Compute the number of digits necessary to print out each number in the Sudoku puzzle
		int digits = (int) Math.floor(Math.log(N) / Math.log(10)) + 1;
 
		// Create a dashed line to separate the boxes 
		int lineLength = (digits + 1) * N + 2 * SIZE - 3;
		StringBuffer line = new StringBuffer();
		for( int lineInit = 0; lineInit < lineLength; lineInit++ )
			line.append('-');
 
		// Go through the grid, printing out its values separated by spaces
		for( int i = 0; i < N; i++ ) {
			for( int j = 0; j < N; j++ ) {
				printFixedWidth( String.valueOf( grid[i][j] ), digits );
				// Print the vertical lines between boxes 
				if( (j < N-1) && ((j+1) % SIZE == 0) )
					System.out.print( " |" );
				System.out.print( " " );
			}
			System.out.println();
 
			// Print the horizontal line between boxes
			if( (i < N-1) && ((i+1) % SIZE == 0) )
				System.out.println( line.toString() );
		}
	}
 
	/* The main function reads in a Sudoku puzzle from the standard input, 
	 * unless a file name is provided as a run-time argument, in which case the
	 * Sudoku puzzle is loaded from that file.  It then solves the puzzle, and
	 * outputs the completed puzzle to the standard output. */
	public static void main( String args[] ) throws Exception {
		InputStream in = new FileInputStream("knightSudokuHard3x3.txt");
 
		// The first number in all Sudoku files must represent the size of the puzzle.  See
		// the example files for the file format.
		int puzzleSize = readInteger( in );
		if( puzzleSize > 100 || puzzleSize < 1 ) {
			System.out.println("Error: The Sudoku puzzle size must be between 1 and 100.");
			System.exit(-1);
		}
 
		ChessSudoku s = new ChessSudoku( puzzleSize );
		
		// You can modify these to add rules to your sudoku
		s.knightRule =true;
		s.kingRule = false;
		s.queenRule =false;
 
		// read the rest of the Sudoku puzzle
		s.read( in );
 
		System.out.println("Before the solve:");
		s.print();
		System.out.println();
		//long startTime = System.currentTimeMillis();  
		// Solve the puzzle by finding one solution.
		s.solve(false);
 
		// Print out the (hopefully completed!) puzzle
		System.out.println("After the solve:");
		s.print();
		
		//long endTime = System.currentTimeMillis();  
 
		//System.out.println("running time " + (endTime - startTime) + "ms"); 
		
		//System.out.println(s.solutions.size());	
		//System.out.println(s.getknights(3,4));
		
		
		//System.out.println(s.getkings(7,3));
		//System.out.println("size  " + s.solutions.size());
		/*
        Iterator<ChessSudoku> itr = s.solutions.iterator();
       while (itr.hasNext()) {
    	   int[][] array = itr.next().grid;
    	   System.out.println(Arrays.deepToString(array).replace("], ", "},\n"));
    	   System.out.println();
      }
      */
        
        
		}
}
